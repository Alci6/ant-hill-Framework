import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, B as validate_each_argument, v as validate_slots, e as element, t as text, a as space, c as claim_element, b as children, f as claim_text, g as detach_dev, h as claim_space, k as add_location, j as attr_dev, l as insert_dev, m as append_dev, n as noop, z as empty, C as destroy_each } from './client.87a6d51a.js';
import { p as posts } from './posts.4ee27549.js';

/* src/routes/blog/index.svelte generated by Svelte v3.28.0 */
const file = "src/routes/blog/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	return child_ctx;
}

// (140:0) {#each posts as post}
function create_each_block(ctx) {
	let article;
	let a;
	let h2;
	let t0_value = /*post*/ ctx[0].title + "";
	let t0;
	let t1;
	let p;
	let t2_value = /*post*/ ctx[0].summary + "";
	let t2;
	let a_href_value;
	let t3;

	const block = {
		c: function create() {
			article = element("article");
			a = element("a");
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			p = element("p");
			t2 = text(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			article = claim_element(nodes, "ARTICLE", {});
			var article_nodes = children(article);
			a = claim_element(article_nodes, "A", { href: true });
			var a_nodes = children(a);
			h2 = claim_element(a_nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, t0_value);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(a_nodes);
			p = claim_element(a_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t3 = claim_space(article_nodes);
			article_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 143, 6, 2896);
			add_location(p, file, 144, 6, 2924);
			attr_dev(a, "href", a_href_value = `/posts/${/*post*/ ctx[0].permalink}`);
			add_location(a, file, 142, 4, 2852);
			add_location(article, file, 140, 2, 2791);
		},
		m: function mount(target, anchor) {
			insert_dev(target, article, anchor);
			append_dev(article, a);
			append_dev(a, h2);
			append_dev(h2, t0);
			append_dev(a, t1);
			append_dev(a, p);
			append_dev(p, t2);
			append_dev(article, t3);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(article);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(140:0) {#each posts as post}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let each_1_anchor;
	let each_value = posts;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("My Weblog");
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "My Weblog");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file, 136, 0, 2712);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*posts*/ 0) {
				each_value = posts;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Blog", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Blog> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ posts });
	return [];
}

class Blog extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Blog",
			options,
			id: create_fragment.name
		});
	}
}

export default Blog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguOWJhMjljOTEuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYmxvZy9pbmRleC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgLy8gaW1wb3J0IHRoZSBsaXN0IG9mIHBvc3RzXG4gIGltcG9ydCB7IHBvc3RzIH0gZnJvbSBcIi4uLy4uL3Bvc3RzXCI7XG48L3NjcmlwdD5cblxuPCEtLSA8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgZXhwb3J0IGZ1bmN0aW9uIHByZWxvYWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goYGJsb2cuanNvbmApXG4gICAgICAudGhlbihyID0+IHIuanNvbigpKVxuICAgICAgLnRoZW4ocG9zdHMgPT4ge1xuICAgICAgICByZXR1cm4geyBwb3N0cyB9O1xuICAgICAgfSk7XG4gIH1cbjwvc2NyaXB0PjxzY3JpcHQ+XG4gIGltcG9ydCBUaXRsZSBmcm9tIFwiLi8uLi8uLi9jb21wb25lbnRzLzEtVGl0bGUuc3ZlbHRlXCI7XG4gIGV4cG9ydCBsZXQgcG9zdHM7XG5cbiAgbGV0IHBvc3RzT3JkZXJlZCA9IHBvc3RzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBhID0gYS5kYXRlXG4gICAgICAuc3BsaXQoXCIvXCIpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAuam9pbihcIlwiKTtcbiAgICBiID0gYi5kYXRlXG4gICAgICAuc3BsaXQoXCIvXCIpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAuam9pbihcIlwiKTtcblxuICAgIHJldHVybiBhIDwgYiA/IDEgOiBhID4gYiA/IC0xIDogMDtcbiAgfSk7XG5cbiAgY29uc3Qgc2hvcnREZXNjcmlwdGlvbiA9IGlucHV0RGVzY3JpcHRpb24gPT4ge1xuICAgIGxldCBvdXRwdXQgPSBcIlwiO1xuICAgIGlucHV0RGVzY3JpcHRpb24ubGVuZ3RoID4gMTQwXG4gICAgICA/IChvdXRwdXQgPSBpbnB1dERlc2NyaXB0aW9uLnN1YnN0cmluZygwLCAxNDApICsgXCIuLi5cIilcbiAgICAgIDogKG91dHB1dCA9IGlucHV0RGVzY3JpcHRpb24pO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgY29uc3QgZGF0ZVRyYW5zZm9ybWVyID0gaW5wdXREYXRlID0+IHtcbiAgICBsZXQgYXJyYXlEYXRlID0gaW5wdXREYXRlLnNwbGl0KFwiL1wiKTtcbiAgICBsZXQgcmV2ZXJzZURhdGUgPSBhcnJheURhdGUucmV2ZXJzZSgpO1xuICAgIGxldCBkaWEgPSBhcnJheURhdGVbMl07XG4gICAgbGV0IG1lcyA9IGFycmF5RGF0ZVsxXSA9PSAwID8gYXJyYXlEYXRlWzFdLnN1YnN0cmluZygxKSA6IGFycmF5RGF0ZVsxXTtcbiAgICBsZXQgYcOxbyA9IGFycmF5RGF0ZVswXTtcblxuICAgIGNvbnN0IGFycmF5TWVzZXMgPSBbXG4gICAgICBcImVuZVwiLFxuICAgICAgXCJmZWJcIixcbiAgICAgIFwibWFyXCIsXG4gICAgICBcImFiclwiLFxuICAgICAgXCJtYXlcIixcbiAgICAgIFwianVuXCIsXG4gICAgICBcImp1bFwiLFxuICAgICAgXCJhZ29cIixcbiAgICAgIFwic2VwdFwiLFxuICAgICAgXCJvY3RcIixcbiAgICAgIFwibm92XCIsXG4gICAgICBcImRpY1wiXG4gICAgXTtcbiAgICByZXR1cm4gYCR7ZGlhfSAke2FycmF5TWVzZXNbbWVzIC0gMV19LiAke1xuICAgICAgYcOxbyA9PSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgPyBcIlwiIDogYcOxb1xuICAgIH1gO1xuICB9O1xuPC9zY3JpcHQ+PHN0eWxlPlxuICAvKiBTbWFsbCBzY3JlZW5zICovXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAuc2VjdGlvbnMge1xuICAgICAgbWFyZ2luLWxlZnQ6IDJyZW07XG4gICAgICBtYXJnaW4tcmlnaHQ6IDJyZW07XG4gICAgfVxuICB9XG5cbiAgLyogTGFyZ2Ugc2NyZWVucyAqL1xuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwMHB4KSB7XG4gICAgLnNlY3Rpb25zIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAzcmVtO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xuICAgIH1cbiAgfVxuXG4gIC5zZWN0aW9ucyB7XG4gICAgbWFyZ2luLWxlZnQ6IDNyZW07XG4gICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xuICB9XG5cbiAgLnBvc3QtY2FyZCB7XG4gICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgbWluLWhlaWdodDogOHZoO1xuICB9XG5cbiAgLnRpdGxlLWNhcmQ6aG92ZXIge1xuICAgIGNvbG9yOiAjZmY3ZDg3O1xuICB9XG5cbiAgLnRpdGxlLWNhcmQ6Zm9jdXMge1xuICAgIGNvbG9yOiAjZmY3ZDg3O1xuICB9XG5cbiAgYSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGNvbG9yOiAjMzMzMzMzO1xuICB9XG48L3N0eWxlPjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPkJsb2c8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPG1haW4gY2xhc3M9XCJzZWN0aW9uc1wiPlxuICA8VGl0bGUgLz5cblxuICA8aDIgY2xhc3M9XCJ0bC1sIHRjXCI+w5psdGltb3MgYXJ0w61jdWxvczwvaDI+XG5cbiAgeyNlYWNoIHBvc3RzT3JkZXJlZCBhcyBwb3N0fVxuICAgIDxhIHJlbD1cInByZWZldGNoXCIgaHJlZj1cImJsb2cve3Bvc3Quc2x1Z31cIj5cblxuICAgICAgPGRpdiBjbGFzcz1cIiBjZW50ZXItbSBwb3N0LWNhcmQgdy02MC1ucyB3LTgwLW0gdy0xMDAgc2hhZG93LTQgYnIzXCI+XG5cbiAgICAgICAgPGgyXG4gICAgICAgICAgY2xhc3M9XCJmMyBsaC1jb3B5IGNvdXJpZXIgbWIwIHBoMyBwdDMgdW5kZXJsaW5lLWhvdmVyIHRpdGxlLWNhcmQgbGlua1wiPlxuICAgICAgICAgIHtwb3N0LnRpdGxlfVxuICAgICAgICA8L2gyPlxuXG4gICAgICAgIHsjaWYgcG9zdC5kZXNjcmlwdGlvbn1cbiAgICAgICAgICA8cCBjbGFzcz1cInBoM1wiPntzaG9ydERlc2NyaXB0aW9uKHBvc3QuZGVzY3JpcHRpb24pfTwvcD5cbiAgICAgICAgey9pZn1cblxuICAgICAgICB7I2lmIHBvc3QuZGF0ZX1cbiAgICAgICAgICA8cCBjbGFzcz1cIiBtYTEgcGIyIHByMiB0ciBmNiBncmF5IGxoLWNvcHkgY291cmllclwiPlxuICAgICAgICAgICAge2RhdGVUcmFuc2Zvcm1lcihwb3N0LmRhdGUpfVxuICAgICAgICAgIDwvcD5cbiAgICAgICAgey9pZn1cblxuICAgICAgPC9kaXY+XG4gICAgPC9hPlxuICB7L2VhY2h9XG5cbjwvbWFpbj4gLS0+XG48aDE+TXkgV2VibG9nPC9oMT5cblxuPCEtLSBpdGVyYXRlIHRocm91Z2ggZWFjaCBwb3N0IC0tPlxueyNlYWNoIHBvc3RzIGFzIHBvc3R9XG4gIDxhcnRpY2xlPlxuICAgIDwhLS0gbGluayBhcnRpY2xlIHRvIC9wb3N0cy8kcGVybWFsaW5rIC0tPlxuICAgIDxhIGhyZWY9e2AvcG9zdHMvJHtwb3N0LnBlcm1hbGlua31gfT5cbiAgICAgIDxoMj57cG9zdC50aXRsZX08L2gyPlxuICAgICAgPHA+e3Bvc3Quc3VtbWFyeX08L3A+XG4gICAgPC9hPlxuICA8L2FydGljbGU+XG57L2VhY2h9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7eUJBK0lXLEdBQUksSUFBQyxLQUFLOzs7O3lCQUNYLEdBQUksSUFBQyxPQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eURBRkMsR0FBSSxJQUFDLFNBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkFIOUIsS0FBSzs7OztnQ0FBVixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztpQkFBQyxLQUFLOzs7OytCQUFWLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
